// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã TDLib
require('dotenv').config();
const { Client } = require('tdl');
const { TDLib } = require('tdl-tdlib-addon');
const path = require('path');
const fs = require('fs');
const os = require('os');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ TDLib
function findTdLibPath() {
  const platform = process.platform;
  let libPath;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  if (platform === 'darwin') {
    libPath = path.resolve(__dirname, 'lib/libtdjson.dylib');
  } else if (platform === 'linux') {
    libPath = path.resolve(__dirname, 'lib/libtdjson.so');
    if (!fs.existsSync(libPath)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const compatPath = path.resolve(__dirname, 'lib/libtdjson.dylib');
      if (fs.existsSync(compatPath)) {
        libPath = compatPath;
      }
    }
  } else if (platform === 'win32') {
    libPath = path.resolve(__dirname, 'lib/tdjson.dll');
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—É—Ç–∏
  if (!libPath || !fs.existsSync(libPath)) {
    const systemPaths = [];
    
    if (platform === 'darwin') {
      systemPaths.push(
        '/usr/local/lib/libtdjson.dylib',
        '/opt/homebrew/lib/libtdjson.dylib'
      );
    } else if (platform === 'linux') {
      systemPaths.push(
        '/usr/local/lib/libtdjson.so',
        '/usr/lib/libtdjson.so',
        '/usr/lib/x86_64-linux-gnu/libtdjson.so'
      );
    } else if (platform === 'win32') {
      systemPaths.push(
        'C:\\Program Files\\TDLib\\bin\\tdjson.dll',
        'C:\\Program Files (x86)\\TDLib\\bin\\tdjson.dll'
      );
    }
    
    for (const p of systemPaths) {
      if (fs.existsSync(p)) {
        libPath = p;
        break;
      }
    }
  }
  
  return libPath;
}

async function testTDLib() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TDLib...');
  console.log(`üíª –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: ${os.platform()} ${os.release()}`);
  
  // –ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
  const libPath = findTdLibPath();
  if (!libPath || !fs.existsSync(libPath)) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ TDLib –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TDLib, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏');
    return false;
  }
  
  console.log(`‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ TDLib –Ω–∞–π–¥–µ–Ω–∞: ${libPath}`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–∏
    const testDir = path.resolve(__dirname, 'test-session');
    if (!fs.existsSync(testDir)) {
      fs.mkdirSync(testDir, { recursive: true });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API ID –∏ Hash
    const apiId = Number(process.env.TELEGRAM_API_ID);
    const apiHash = process.env.TELEGRAM_API_HASH;
    
    if (!apiId || !apiHash) {
      console.error('‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_API_ID –∏–ª–∏ TELEGRAM_API_HASH –≤ .env —Ñ–∞–π–ª–µ');
      return false;
    }
    
    console.log(`üìä API ID: ${apiId}, API Hash: ${apiHash}`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç TDLib
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ TDLib...');
    const client = new Client(new TDLib(libPath), {
      apiId,
      apiHash
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    client.on('error', error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ TDLib:', error);
    });
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ TDLib
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TDLib...');
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é TDLib
    const version = await client.invoke({
      _: 'getOption',
      name: 'version'
    });
    console.log(`üìã –í–µ—Ä—Å–∏—è TDLib: ${version.value}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authState = await client.invoke({
      _: 'getAuthorizationState'
    });
    console.log(`üîë –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authState._}`);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    console.log('üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞...');
    await client.close();
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç');
    
    console.log('‚úÖ –¢–µ—Å—Ç TDLib —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ TDLib:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTDLib()
  .then(success => {
    if (success) {
      console.log('üéâ TDLib —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      process.exit(0);
    } else {
      console.error('‚ùå –¢–µ—Å—Ç TDLib –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π');
      process.exit(1);
    }
  })
  .catch(error => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }); 