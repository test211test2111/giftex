// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API_ID –∏ API_HASH
require('dotenv').config();
const { Client } = require('tdl');
const tdlAddon = require('tdl-tdlib-addon');
const path = require('path');
const fs = require('fs');

async function verifyApiCredentials() {
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ API_ID –∏ API_HASH...');
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
  const testDir = path.resolve(__dirname, 'verify-test');
  if (!fs.existsSync(testDir)) {
    fs.mkdirSync(testDir, { recursive: true });
  }
  
  // API ID –∏ Hash
  const apiId = Number(process.env.TELEGRAM_API_ID);
  const apiHash = process.env.TELEGRAM_API_HASH;
  
  console.log('API_ID:', apiId, '—Ç–∏–ø:', typeof apiId);
  console.log('API_HASH:', apiHash);
  
  // –ü—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
  const libPath = path.resolve(__dirname, 'lib/libtdjson.dylib');
  console.log('–ü—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ:', libPath);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    const client = new Client(new tdlAddon.TDLib(libPath), {
      apiId,
      apiHash,
      databaseDirectory: testDir,
      filesDirectory: path.resolve(testDir, 'files'),
    });
    
    console.log('–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    await client.connect();
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    let errorReceived = false;
    client.on('error', error => {
      console.error('–û—à–∏–±–∫–∞:', error);
      errorReceived = true;
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('–ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const authState = await client.invoke({
      _: 'getAuthorizationState'
    });
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authState._);
    
    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã TDLib
    if (authState._ === 'authorizationStateWaitTdlibParameters') {
      console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã TDLib...');
      try {
        const result = await client.invoke({
          _: 'setTdlibParameters',
          use_message_database: true,
          use_secret_chats: false,
          system_language_code: 'ru',
          database_directory: testDir,
          files_directory: path.resolve(testDir, 'files'),
          api_id: apiId,
          api_hash: apiHash,
          device_model: 'Web Client',
          system_version: 'Unknown',
          application_version: '1.0.0',
          enable_storage_optimizer: true
        });
        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:', result);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', error);
        await client.close();
        return false;
      }
    }
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    await client.close();
    console.log('–ö–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç');
    
    return !errorReceived;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
verifyApiCredentials()
  .then(success => {
    if (success) {
      console.log('üü¢ API_ID –∏ API_HASH –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    } else {
      console.log('üî¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ API_ID –∏ API_HASH –Ω–µ —É–¥–∞–ª–∞—Å—å');
      process.exit(1);
    }
  })
  .catch(err => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
  }); 