// –†–∞–±–æ—á–∏–π —Ç–µ—Å—Ç TDLib —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
require('dotenv').config();
const { Client } = require('tdl');
const { TDLib } = require('tdl-tdlib-addon');
const path = require('path');
const fs = require('fs');
const readline = require('readline');

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –ü—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ TDLib
const libPath = path.resolve(__dirname, 'lib/libtdjson.dylib');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const question = (query) => {
  return new Promise((resolve) => {
    rl.question(query, (answer) => {
      resolve(answer);
    });
  });
};

async function tdlibTest() {
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–∏
  const sessionDir = path.resolve(__dirname, 'working-test-session');
  if (!fs.existsSync(sessionDir)) {
    fs.mkdirSync(sessionDir, { recursive: true });
  }
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è TDLib
  const apiId = Number(process.env.TELEGRAM_API_ID);
  const apiHash = process.env.TELEGRAM_API_HASH;
  
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ TDLib...');
  console.log(`API_ID: ${apiId}, API_HASH: ${apiHash}`);
  console.log(`–ü—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ: ${libPath} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${fs.existsSync(libPath)})`);
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
  const client = new Client(new TDLib(libPath), {
    apiId,
    apiHash,
  });
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  let waitingPhoneNumber = false;
  let waitingCode = false;
  let waitingPassword = false;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  client.on('update', async update => {
    if (update._ === 'updateAuthorizationState') {
      console.log(`–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${update.authorization_state._}`);
      
      // –®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ TDLib
      if (update.authorization_state._ === 'authorizationStateWaitTdlibParameters') {
        console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ TDLib...');
        await client.invoke({
          _: 'setTdlibParameters',
          database_directory: sessionDir,
          files_directory: path.resolve(sessionDir, 'files'),
          use_message_database: true,
          use_secret_chats: false,
          use_test_dc: false,
          system_language_code: 'ru',
          device_model: 'Desktop',
          system_version: 'Unknown',
          application_version: '1.0.0',
          api_id: apiId,
          api_hash: apiHash,
          enable_storage_optimizer: true
        });
      }
      
      // –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      else if (update.authorization_state._ === 'authorizationStateWaitPhoneNumber') {
        waitingPhoneNumber = true;
        console.log('üì± –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789)');
      }
      
      // –®–∞–≥ 3: –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      else if (update.authorization_state._ === 'authorizationStateWaitCode') {
        waitingPhoneNumber = false;
        waitingCode = true;
        console.log('üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω');
      }
      
      // –®–∞–≥ 4: –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
      else if (update.authorization_state._ === 'authorizationStateWaitPassword') {
        waitingCode = false;
        waitingPassword = true;
        console.log('üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞');
      }
      
      // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      else if (update.authorization_state._ === 'authorizationStateReady') {
        waitingPassword = false;
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      }
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  client.on('error', error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ TDLib:', error);
  });
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TDLib...');
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ TDLib —É—Å–ø–µ—à–Ω–æ');
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    let running = true;
    while (running) {
      // –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      if (waitingPhoneNumber) {
        const phoneNumber = await question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ');
        await client.invoke({
          _: 'setAuthenticationPhoneNumber',
          phone_number: phoneNumber
        });
      }
      
      // –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞
      else if (waitingCode) {
        const code = await question('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS: ');
        await client.invoke({
          _: 'checkAuthenticationCode',
          code
        });
      }
      
      // –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è
      else if (waitingPassword) {
        const password = await question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ');
        await client.invoke({
          _: 'checkAuthenticationPassword',
          password
        });
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      else if (!waitingPhoneNumber && !waitingCode && !waitingPassword) {
        try {
          const me = await client.invoke({
            _: 'getMe'
          });
          console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', JSON.stringify(me, null, 2));
          running = false;
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
          running = false;
        }
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    await client.close();
    rl.close();
    console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    rl.close();
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
tdlibTest()
  .then(success => {
    if (success) {
      console.log('üéâ TDLib —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      process.exit(0);
    } else {
      console.log('‚ùå –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å TDLib');
      process.exit(1);
    }
  }); 