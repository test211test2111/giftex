// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TDLib
require('dotenv').config();
const { TelegramClient } = require('./config/telegram');
const readline = require('readline');

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const question = (query) => {
  return new Promise((resolve) => {
    rl.question(query, (answer) => {
      resolve(answer);
    });
  });
};

async function runTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ TDLib —Å –∫–ª–∞—Å—Å–æ–º TelegramClient');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ TDLib...');
    const client = new TelegramClient('final-test');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ TDLib
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TDLib...');
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authState = await client.getAuthState();
    console.log('üìã –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authState._);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (authState._ === 'authorizationStateWaitPhoneNumber') {
      const phoneNumber = await question('üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ');
      console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞...');
      await client.sendPhoneNumber(phoneNumber);
      console.log('‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
      
      // –ñ–¥–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 2000));
      const code = await question('üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ');
      console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
      await client.sendCode(code);
      console.log('‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å
      await new Promise(resolve => setTimeout(resolve, 2000));
      const newAuthState = await client.getAuthState();
      if (newAuthState._ === 'authorizationStateWaitPassword') {
        const password = await question('üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ');
        console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–æ–ª—è...');
        await client.sendPassword(password);
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
      }
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const finalAuthState = await client.getAuthState();
    if (finalAuthState._ === 'authorizationStateReady') {
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
      const me = await client.getMe();
      console.log('üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:');
      console.log(`  ID: ${me.id}`);
      console.log(`  –ò–º—è: ${me.first_name}`);
      console.log(`  –§–∞–º–∏–ª–∏—è: ${me.last_name || '-'}`);
      console.log(`  –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${me.username || '-'}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const sendTest = await question('üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"? (–¥–∞/–Ω–µ—Ç): ');
      if (sendTest.toLowerCase() === '–¥–∞') {
        console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
        await client.sendMessage(me.id, '‚úÖ TDLib —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω.');
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      }
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –°–æ—Å—Ç–æ—è–Ω–∏–µ:', finalAuthState._);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    await client.close();
    rl.close();
    console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    rl.close();
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runTest()
  .then(success => {
    if (success) {
      console.log('üéâ TDLib —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      process.exit(0);
    } else {
      console.log('‚ùå –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å TDLib');
      process.exit(1);
    }
  }); 