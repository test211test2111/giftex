// –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π –∫–ª–∏–µ–Ω—Ç Telegram —Å TDLib
require('dotenv').config();
const { Client } = require('tdl');
const { TDLib } = require('tdl-tdlib-addon');
const path = require('path');
const fs = require('fs');
const readline = require('readline');

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const question = (query) => {
  return new Promise((resolve) => {
    rl.question(query, (answer) => {
      resolve(answer);
    });
  });
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
async function runTelegramClient() {
  console.log('üåü –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telegram —Å TDLib');
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–∏
  const sessionDir = path.resolve(__dirname, 'telegram-session');
  if (!fs.existsSync(sessionDir)) {
    fs.mkdirSync(sessionDir, { recursive: true });
  }
  
  // –ü—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ TDLib
  const libPath = path.resolve(__dirname, 'lib/libtdjson.dylib');
  if (!fs.existsSync(libPath)) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ TDLib –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', libPath);
    return false;
  }
  console.log('‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ TDLib –Ω–∞–π–¥–µ–Ω–∞:', libPath);
  
  // API ID –∏ Hash
  const apiId = Number(process.env.TELEGRAM_API_ID);
  const apiHash = process.env.TELEGRAM_API_HASH;
  console.log(`üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º API_ID: ${apiId}, API_HASH: ${apiHash}`);
  
  try {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    let waitPhoneNumber = false;
    let waitCode = false; 
    let waitPassword = false;
    let isReady = false;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç TDLib
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ TDLib...');
    const client = new Client(new TDLib(libPath), {
      apiId,
      apiHash,
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    client.on('update', async update => {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (update._ === 'updateAuthorizationState') {
        const authState = update.authorization_state._;
        console.log('üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authState);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (authState === 'authorizationStateWaitTdlibParameters') {
          console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ TDLib...');
          try {
            await client.invoke({
              _: 'setTdlibParameters',
              database_directory: sessionDir,
              files_directory: path.resolve(sessionDir, 'files'),
              use_message_database: true,
              use_secret_chats: false,
              use_test_dc: false,
              api_id: apiId,
              api_hash: apiHash,
              device_model: 'Desktop',
              system_version: 'Unknown',
              application_version: '1.0.0',
              system_language_code: 'ru',
              enable_storage_optimizer: true
            });
          } catch (error) {
            if (error.message !== 'Unexpected setTdlibParameters') {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', error);
            }
          }
        } 
        else if (authState === 'authorizationStateWaitPhoneNumber') {
          waitPhoneNumber = true;
        }
        else if (authState === 'authorizationStateWaitCode') {
          waitPhoneNumber = false;
          waitCode = true;
        }
        else if (authState === 'authorizationStateWaitPassword') {
          waitCode = false;
          waitPassword = true;
        }
        else if (authState === 'authorizationStateReady') {
          waitPassword = false;
          isReady = true;
          console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        }
      }
    });
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É Telegram...');
    await client.connect();
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    let running = true;
    while (running) {
      if (waitPhoneNumber) {
        const phoneNumber = await question('üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789): ');
        try {
          await client.invoke({
            _: 'setAuthenticationPhoneNumber',
            phone_number: phoneNumber
          });
          console.log('‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–º–µ—Ä–∞:', error);
        }
      } 
      else if (waitCode) {
        const code = await question('üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ SMS: ');
        try {
          await client.invoke({
            _: 'checkAuthenticationCode',
            code
          });
          console.log('‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞:', error);
        }
      } 
      else if (waitPassword) {
        const password = await question('üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ');
        try {
          await client.invoke({
            _: 'checkAuthenticationPassword',
            password
          });
          console.log('‚úÖ –ü–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞—Ä–æ–ª—è:', error);
        }
      } 
      else if (isReady) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
          const me = await client.invoke({
            _: 'getMe'
          });
          console.log('üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:');
          console.log(`   ID: ${me.id}`);
          console.log(`   –ò–º—è: ${me.first_name}`);
          console.log(`   –§–∞–º–∏–ª–∏—è: ${me.last_name || '-'}`);
          console.log(`   –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${me.username || '-'}`);
          console.log(`   –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${me.phone_number}`);
          
          // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
          console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤...');
          const { chat_ids } = await client.invoke({
            _: 'getChats',
            chat_list: { _: 'chatListMain' },
            limit: 10
          });
          
          console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${chat_ids.length} —á–∞—Ç–æ–≤:`);
          
          for (let i = 0; i < Math.min(5, chat_ids.length); i++) {
            const chat = await client.invoke({
              _: 'getChat',
              chat_id: chat_ids[i]
            });
            console.log(`   ${i+1}. ${chat.title}`);
          }
          
          // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
          const sendTest = await question('üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"? (–¥–∞/–Ω–µ—Ç): ');
          if (sendTest.toLowerCase() === '–¥–∞') {
            await client.invoke({
              _: 'sendMessage',
              chat_id: me.id,
              input_message_content: {
                _: 'inputMessageText',
                text: {
                  _: 'formattedText',
                  text: 'üéâ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç TDLib. –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!'
                }
              }
            });
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"!');
          }
          
          // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
          running = false;
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API Telegram:', error);
          running = false;
        }
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
      if (running) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    await client.close();
    rl.close();
    
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç Telegram —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!');
    return true;
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    rl.close();
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
runTelegramClient()
  .then(success => {
    if (success) {
      console.log('üéâ TDLib –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } else {
      console.error('‚ùå –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏');
    }
  })
  .catch(error => {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  }); 