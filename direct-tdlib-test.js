// –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ tdl –±–µ–∑ –Ω–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞-–æ–±–µ—Ä—Ç–∫–∏
require('dotenv').config();
const { Client } = require('tdl');
const tdlAddon = require('tdl-tdlib-addon');
const path = require('path');
const fs = require('fs');

async function testDirectTdl() {
  console.log('–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TDLib...');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  const testDir = path.resolve(__dirname, 'test-direct-tdl');
  if (!fs.existsSync(testDir)) {
    fs.mkdirSync(testDir, { recursive: true });
  }
  
  // –í—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  console.log('TELEGRAM_API_ID:', process.env.TELEGRAM_API_ID, '—Ç–∏–ø:', typeof process.env.TELEGRAM_API_ID);
  console.log('TELEGRAM_API_HASH:', process.env.TELEGRAM_API_HASH ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  
  // API ID –∫–∞–∫ —á–∏—Å–ª–æ
  const apiId = Number(process.env.TELEGRAM_API_ID);
  console.log('apiId –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:', apiId, '—Ç–∏–ø:', typeof apiId);
  
  // –ù–∞–π–¥–µ–º –Ω–∞—à—É –±–∏–±–ª–∏–æ—Ç–µ–∫—É
  const localLibPath = path.resolve(__dirname, 'lib/libtdjson.dylib');
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ:', localLibPath);
  console.log('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', fs.existsSync(localLibPath));
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—É—Ç–µ–º –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
    const client = new Client(new tdlAddon.TDLib(localLibPath), {
      apiId: apiId,
      apiHash: process.env.TELEGRAM_API_HASH,
      databaseDirectory: testDir,
      filesDirectory: path.resolve(testDir, 'files')
    });
    
    console.log('–ö–ª–∏–µ–Ω—Ç TDLib —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
    await client.connect();
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ!');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authState = await client.invoke({
      _: 'getAuthorizationState'
    });
    console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authState._);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    await client.close();
    console.log('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ TDLib:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDirectTdl()
  .then(success => {
    if (success) {
      console.log('üü¢ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TDLib —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    } else {
      console.log('üî¥ –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø—Ä—è–º–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ TDLib');
      process.exit(1);
    }
  })
  .catch(err => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
  }); 