<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  
  <!-- Шрифты -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  
  <!-- Telegram Widget API -->
  <script async src="https://telegram.org/js/telegram-widget.js"></script>
  
  <!-- CSS -->
  <link rel="stylesheet" href="/css/style.css">
  
  <!-- Фавиконка -->
  <link rel="shortcut icon" href="/ico.ico" type="image/x-icon">
  
  <style>
    :root {
      --primary: #0088cc;
      --accent: #FFD700;
      --text: #333333;
      --text-light: #777777;
      --bg: #ffffff;
      --bg-light: #f5f5f5;
      --border: #eeeeee;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Space Grotesk', sans-serif;
      color: var(--text);
      background-color: var(--bg);
      line-height: 1.5;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      scroll-behavior: smooth;
      overflow-x: hidden;
    }
    
    h1, h2, h3, h4, h5, h6 {
      font-weight: 600;
      line-height: 1.2;
      margin-bottom: 1rem;
    }
    
    a {
      text-decoration: none;
      color: var(--primary);
      transition: all 0.2s ease;
    }
    
    button {
      cursor: pointer;
      font-family: 'Space Grotesk', sans-serif;
      border: none;
      background: none;
    }
    
    .container {
      width: 100%;
      max-width: 1140px;
      margin: 0 auto;
      padding: 0 20px;
    }
    
    /* Основные компоненты */
    .header {
      height: 70px;
      border-bottom: 1px solid var(--border);
      display: flex;
      align-items: center;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      background: rgba(255, 255, 255, 0.98);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      z-index: 1000;
    }
    
    .logo {
      display: flex;
      align-items: center;
      gap: 10px;
      font-weight: 700;
      font-size: 20px;
    }
    
    .logo-img {
      width: 32px;
      height: 32px;
      border-radius: 8px;
      background: var(--primary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
    }
    
    .nav {
      display: flex;
      align-items: center;
      gap: 30px;
    }
    
    .nav-link {
      color: var(--text);
      font-weight: 500;
      font-size: 15px;
    }
    
    .nav-link:hover {
      color: var(--primary);
    }
    
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      height: 44px;
      padding: 0 20px;
      border-radius: 8px;
      font-weight: 500;
      font-size: 15px;
      transition: all 0.2s ease;
    }
    
    .btn-primary {
      background-color: var(--primary);
      color: white;
    }
    
    .btn-primary:hover {
      background-color: var(--primary);
      opacity: 0.9;
      transform: translateY(-1px);
    }
    
    .btn-outline {
      border: 1px solid var(--border);
      color: var(--text);
    }
    
    .btn-outline:hover {
      border-color: var(--text-light);
      color: var(--primary);
      background-color: rgba(0, 0, 0, 0.02);
    }
    
    .section {
      padding: 80px 0;
    }
    
    .hero {
      padding: 120px 0 80px;
      text-align: center;
    }
    
    .subtitle {
      color: var(--primary);
      font-weight: 500;
      font-size: 16px;
      text-transform: uppercase;
      letter-spacing: 2px;
      margin-bottom: 16px;
    }
    
    .title {
      font-size: 48px;
      line-height: 1.1;
      margin-bottom: 24px;
      max-width: 800px;
      margin-left: auto;
      margin-right: auto;
    }
    
    .description {
      font-size: 18px;
      color: var(--text-light);
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
      margin-bottom: 32px;
    }
    
    /* Карточки */
    .card {
      background-color: var(--bg);
      border-radius: 12px;
      box-shadow: 0 2px 12px rgba(0, 0, 0, 0.04);
      transition: all 0.3s ease;
      border: 1px solid var(--border);
      overflow: hidden;
    }
    
    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.06);
    }
    
    /* Рулетка */
    .roulette-wrapper {
      width: 100%;
      margin: 60px 0;
      position: relative;
    }
    
    .roulette-container {
      width: 100%;
      height: 120px;
      overflow: hidden;
      position: relative;
      background: var(--bg-light);
      border-radius: 12px;
      box-shadow: inset 0 0 20px rgba(0, 0, 0, 0.05);
      border: 1px solid var(--border);
    }
    
    .roulette-items {
      animation: slideItems 60s linear infinite;
      animation-play-state: running;
      will-change: transform;
      display: flex;
      align-items: center;
      position: absolute;
      height: 100%;
      left: 0;
      padding: 0 10px;
    }
    
    @keyframes slideItems {
      0% {
        transform: translateX(-50%);
      }
      100% {
        transform: translateX(calc(-50% - 1200px)); /* 10 элементов по 120px */
      }
    }
    
    /* Добавляем эффект затухания по краям рулетки */
    .roulette-container::before,
    .roulette-container::after {
      content: '';
      position: absolute;
      top: 0;
      bottom: 0;
      width: 100px;
      z-index: 5;
      pointer-events: none;
    }
    
    .roulette-container::before {
      left: 0;
      background: linear-gradient(to right, var(--bg-light), transparent);
    }
    
    .roulette-container::after {
      right: 0;
      background: linear-gradient(to left, var(--bg-light), transparent);
    }
    
    .roulette-spinning {
      animation: spinRoulette 3s cubic-bezier(0.1, 0.8, 0.2, 1) forwards;
    }
    
    @keyframes spinRoulette {
      0% {
        transform: translateX(-50%);
      }
      10% {
        transform: translateX(calc(-50% - 100px));
      }
      40% {
        transform: translateX(calc(-50% - 800px));
      }
      70% {
        transform: translateX(calc(-50% - 1000px));
      }
      100% {
        transform: translateX(calc(-50% - 1200px));
      }
    }
    
    .roulette-item {
      width: 100px;
      height: 100px;
      background: white;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 36px;
      margin: 0 10px;
      flex-shrink: 0;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
      border: 1px solid var(--border);
      transition: transform 0.3s ease;
    }
    
    /* Стили для изображений подарков */
    .gift-image {
      width: 70px;
      height: 70px;
      object-fit: contain;
      transition: transform 0.3s ease;
      filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
    }
    
    .roulette-item:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
      z-index: 2;
    }
    
    .roulette-marker {
      position: absolute;
      left: 50%;
      top: 0;
      bottom: 0;
      width: 4px;
      background-color: var(--primary);
      transform: translateX(-50%);
      z-index: 10;
      border-radius: 2px;
      box-shadow: 0 0 10px rgba(0, 136, 204, 0.5);
    }
    
    /* Подсветка для элемента в центре (под маркером) */
    .roulette-center-item {
      transform: translateY(-5px) scale(1.05);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
      z-index: 3;
      border: 2px solid var(--primary);
    }
    
    .roulette-center-item .gift-image {
      filter: drop-shadow(0 3px 6px rgba(0, 0, 0, 0.2));
      animation: pulseGlow 2s ease-in-out infinite;
    }
    
    @keyframes pulseGlow {
      0%, 100% {
        filter: drop-shadow(0 3px 6px rgba(0, 0, 0, 0.2));
      }
      50% {
        filter: drop-shadow(0 3px 12px rgba(0, 136, 204, 0.5));
      }
    }
    
    .roulette-marker::before,
    .roulette-marker::after {
      content: '';
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
      width: 12px;
      height: 12px;
      background-color: var(--primary);
      border-radius: 50%;
    }
    
    .roulette-marker::before {
      top: 0;
    }
    
    .roulette-marker::after {
      bottom: 0;
    }
    
    /* Лента выигрышей */
    .winners-ticker {
      background-color: var(--primary);
      color: white;
      padding: 12px 0;
      overflow: hidden;
      margin: 40px 0;
    }
    
    .ticker-container {
      display: flex;
      animation: ticker 30s linear infinite;
      white-space: nowrap;
    }
    
    .ticker-item {
      padding: 0 20px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .ticker-avatar {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background-color: rgba(255, 255, 255, 0.2);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
    }
    
    /* Стили для подарков в ленте победителей */
    .ticker-gift {
      width: 24px;
      height: 24px;
      object-fit: contain;
      margin-left: 5px;
      animation: tickerGiftPulse 2s ease-in-out infinite;
      filter: drop-shadow(0 1px 2px rgba(255, 255, 255, 0.3));
    }
    
    @keyframes tickerGiftPulse {
      0%, 100% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.2);
      }
    }
    
    @keyframes ticker {
      0% {
        transform: translateX(0);
      }
      100% {
        transform: translateX(-50%);
      }
    }
    
    /* Модальные окна */
    .modal-backdrop {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.5);
      backdrop-filter: blur(5px);
      -webkit-backdrop-filter: blur(5px);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1050;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      padding: 15px;
    }
    
    .modal-backdrop.active {
      opacity: 1;
      visibility: visible;
    }
    
    .modal-content {
      background-color: var(--bg);
      border-radius: 12px;
      padding: 32px;
      width: 90%;
      max-width: 420px;
      transform: translateY(20px);
      transition: all 0.3s ease;
      max-height: 90vh;
      overflow-y: auto;
    }
    
    .modal-backdrop.active .modal-content {
      transform: translateY(0);
    }
    
    .modal-title {
      font-size: 20px;
      font-weight: 600;
      margin-bottom: 16px;
    }
    
    /* Стили для изображения выигранного подарка */
    .win-gift-img {
      width: 120px;
      height: 120px;
      object-fit: contain;
      margin: 20px auto;
      display: block;
      filter: drop-shadow(0 5px 15px rgba(0, 0, 0, 0.15));
      transform-origin: center bottom;
      animation: floatingGift 4s ease-in-out infinite;
    }
    
    @keyframes floatingGift {
      0% {
        transform: translateY(0) rotate(0deg);
      }
      25% {
        transform: translateY(-10px) rotate(3deg);
      }
      50% {
        transform: translateY(-15px) rotate(0deg);
      }
      75% {
        transform: translateY(-10px) rotate(-3deg);
      }
      100% {
        transform: translateY(0) rotate(0deg);
      }
    }
    
    /* Утилиты */
    .flex {
      display: flex;
    }
    
    .items-center {
      align-items: center;
    }
    
    .justify-between {
      justify-content: space-between;
    }
    
    .gap-20 {
      gap: 20px;
    }
    
    .gap-10 {
      gap: 10px;
    }
    
    .text-center {
      text-align: center;
    }
    
    .mt-40 {
      margin-top: 40px;
    }
    
    .hidden {
      display: none;
    }
    
    /* Медиа-запросы для адаптивности */
    @media (max-width: 768px) {
      .header {
        height: auto;
        padding: 15px 0;
      }
      
      .desktop-only {
        display: none !important;
      }
      
      .nav {
        flex-direction: column;
        align-items: flex-end;
        gap: 15px;
      }
      
      .user-profile {
        flex-direction: column;
        align-items: flex-end;
      }
      
      .login-btn {
        margin-top: 10px;
      }
      
      .title {
        font-size: 32px;
        margin-bottom: 15px;
      }
      
      .description {
        font-size: 16px;
      }
      
      .hero {
        padding: 100px 0 50px;
      }
      
      .section {
        padding: 50px 0;
      }
      
      .flex {
        flex-wrap: wrap;
      }
      
      /* Стили для карточек на мобильных устройствах */
      .card {
        min-width: 100% !important;
        margin-bottom: 20px;
        padding: 20px !important;
      }
      
      .card h3 {
        font-size: 18px;
        margin-bottom: 10px;
      }
      
      .card p {
        font-size: 14px;
      }
      
      /* Стили для полноэкранных кнопок на мобильных */
      .mobile-full-width {
        width: 100%;
        text-align: center;
        justify-content: center;
      }
      
      /* Центрирование элементов управления */
      #roulette-controls {
        margin-top: 25px;
        flex-direction: column;
      }
      
      /* Адаптация рулетки */
      .roulette-wrapper {
        margin: 30px 0;
      }
      
      .roulette-container {
        height: 100px;
      }
      
      .mobile-roulette {
        height: 100px;
        border-radius: 10px;
      }
      
      .mobile-roulette .roulette-marker {
        width: 3px;
      }
      
      .mobile-roulette .roulette-marker::before,
      .mobile-roulette .roulette-marker::after {
        width: 10px;
        height: 10px;
      }
      
      .roulette-item {
        width: 80px;
        height: 80px;
        margin: 0 8px;
      }
      
      .gift-image {
        width: 60px;
        height: 60px;
      }
      
      .roulette-container::before,
      .roulette-container::after {
        width: 60px;
      }
      
      /* Адаптируем анимации для мобильных устройств */
      @keyframes slideItems-mobile {
        0% {
          transform: translateX(-50%);
        }
        100% {
          transform: translateX(calc(-50% - 960px)); /* 10 элементов по 80px + отступы */
        }
      }
      
      @keyframes spinRoulette-mobile {
        0% {
          transform: translateX(-50%);
        }
        10% {
          transform: translateX(calc(-50% - 80px));
        }
        40% {
          transform: translateX(calc(-50% - 640px));
        }
        70% {
          transform: translateX(calc(-50% - 800px));
        }
        100% {
          transform: translateX(calc(-50% - 960px));
        }
      }
      
      .roulette-items {
        animation-name: slideItems-mobile;
      }
      
      .roulette-spinning {
        animation-name: spinRoulette-mobile;
      }
      
      /* Адаптация модальных окон */
      .modal-content {
        padding: 20px;
        width: 95%;
      }
      
      .win-gift-img {
        width: 100px;
        height: 100px;
      }
      
      /* Адаптация кнопок и кликабельных элементов */
      .btn {
        height: 42px;
        padding: 0 15px;
        font-size: 14px;
      }
      
      /* Адаптация контейнеров для лучшего отображения */
      .container {
        padding: 0 15px;
      }
      
      /* Фиксим отступы между элементами в мобильном виде */
      .gap-20 {
        gap: 10px;
      }
      
      /* Уменьшаем отступы в тексте */
      .subtitle {
        font-size: 14px;
        margin-bottom: 10px;
      }
    }
    
    /* Дополнительные стили для очень узких экранов */
    @media (max-width: 480px) {
      .title {
        font-size: 28px;
      }
      
      .description {
        font-size: 15px;
      }
      
      .logo {
        font-size: 18px;
      }
      
      .logo-img {
        width: 28px;
        height: 28px;
      }
      
      .btn {
        width: 100%;
        margin-bottom: 10px;
        height: 48px; /* Увеличиваем высоту кнопок для лучшего взаимодействия на мобильных */
      }
      
      .flex.justify-center {
        flex-direction: column;
        align-items: center;
        width: 100%;
      }
      
      .roulette-item {
        width: 70px;
        height: 70px;
      }
      
      .gift-image {
        width: 50px;
        height: 50px;
      }
      
      .roulette-container {
        height: 90px;
      }
      
      .modal-content {
        padding: 15px;
      }
      
      /* Фиксим отступы и размеры для лучшего использования на мобильных */
      .section {
        padding: 40px 0;
      }
      
      .hero {
        padding: 90px 0 40px;
      }
      
      /* Уменьшаем анимации на мобильных для оптимизации */
      @keyframes slideItems-mobile {
        0% {
          transform: translateX(-50%);
        }
        100% {
          transform: translateX(calc(-50% - 840px)); /* 10 элементов по 70px + отступы */
        }
      }
      
      @keyframes spinRoulette-mobile {
        0% {
          transform: translateX(-50%);
        }
        10% {
          transform: translateX(calc(-50% - 70px));
        }
        40% {
          transform: translateX(calc(-50% - 560px));
        }
        70% {
          transform: translateX(calc(-50% - 700px));
        }
        100% {
          transform: translateX(calc(-50% - 840px));
        }
      }
    }
  </style>
</head>
<body>
  <!-- Шапка -->
  <header class="header">
    <div class="container flex justify-between items-center">
      <a href="/" class="logo">
        <div class="logo-img">🎁</div>
        <span>GIFTEX</span>
      </a>
      
      <nav class="nav">
        <a href="#how-it-works" class="nav-link desktop-only">Как это работает</a>
        <% if (locals.user) { %>
          <div class="flex items-center gap-10 user-profile">
            <div class="flex items-center gap-10">
              <% if (user.photoUrl) { %>
                <img src="<%= user.photoUrl %>" alt="<%= user.firstName %>" class="avatar" style="width: 32px; height: 32px; border-radius: 50%;">
              <% } %>
              <span><%= user.firstName %></span>
            </div>
            <a href="/tdauth/logout" class="btn btn-outline">Выйти</a>
          </div>
        <% } else { %>
          <a href="/tdauth" class="btn btn-primary login-btn">
            Войти через Telegram
          </a>
        <% } %>
      </nav>
    </div>
  </header>

  <!-- Основной контент -->
  <main>
    <section class="section hero">
      <div class="container">
        <p class="subtitle">Рулетка подарков в Telegram</p>
        <h1 class="title">Крутите рулетку и выигрывайте подарки бесплатно в Telegram</h1>
        <p class="description">
          Бесплатный способ получить подарки в свой Telegram-профиль.
        </p>
        
        <div class="flex justify-center gap-20">
          <% if (locals.user && user.tdlibAuthorized) { %>
            <button id="spin-button" class="btn btn-primary">
              Крутить рулетку
            </button>
          <% } else { %>
            <a href="/tdauth" class="btn btn-primary">
              Крутить рулетку
            </a>
          <% } %>
          <a href="#how-it-works" class="btn btn-outline desktop-only">
            Как это работает
          </a>
        </div>
        
        <div class="roulette-wrapper">
          <div class="roulette-container" id="roulette-container">
            <div class="roulette-marker"></div>
            <div class="roulette-items" id="roulette-items">
              <!-- Элементы рулетки генерируются динамически -->
            </div>
          </div>
          
          <div id="roulette-controls" class="flex items-center justify-center gap-20 mt-40">
            <% if (locals.user && user.tdlibAuthorized) { %>
              <% if (!locals.messagesSent) { %>
                <button id="bottom-spin-button" class="btn btn-primary mobile-full-width">
                  Крутить рулетку
                </button>
              <% } else { %>
                <div class="text-center">
                  <p class="mb-4">Вы уже участвовали в розыгрыше!</p>
                  <a href="/profile" class="btn btn-outline">Мой профиль</a>
                </div>
              <% } %>
            <% } else { %>
              <a href="/tdauth" class="btn btn-primary mobile-full-width">
                Войти через Telegram
              </a>
            <% } %>
          </div>
        </div>
      </div>
    </section>
    
    <!-- Лента выигрышей -->
    <div class="winners-ticker">
      <div class="ticker-container" id="winners-feed">
        <!-- Элементы ленты будут добавлены через JavaScript -->
      </div>
    </div>
    
    <!-- Блок продаж -->
    <section class="section">
      <div class="container">
        <h2 class="text-center" style="margin-bottom: 40px;">Преимущества GIFTEX</h2>
        
        <div class="flex justify-between" style="gap: 30px; flex-wrap: wrap;">
          <!-- Карточка 1 -->
          <div class="card" style="flex: 1; min-width: 250px; padding: 30px; text-align: center;">
            <div style="font-size: 48px; margin-bottom: 20px;">🚀</div>
            <h3>Моментальная отправка</h3>
            <p style="color: var(--text-light);">Мгновенная отправка подарков вашим друзьям и контактам в Telegram</p>
          </div>
          
          <!-- Карточка 2 -->
          <div class="card" style="flex: 1; min-width: 250px; padding: 30px; text-align: center;">
            <div style="font-size: 48px; margin-bottom: 20px;">🔒</div>
            <h3>Безопасно и надежно</h3>
            <p style="color: var(--text-light);">Мы не храним ваши личные данные и используем официальное API Telegram</p>
          </div>
          
          <!-- Карточка 3 -->
          <div class="card" style="flex: 1; min-width: 250px; padding: 30px; text-align: center;">
            <div style="font-size: 48px; margin-bottom: 20px;">✨</div>
            <h3>Анимированные подарки</h3>
            <p style="color: var(--text-light);">Красивые анимированные подарки, которые понравятся вашим друзьям</p>
          </div>
        </div>
        
        <div class="text-center" style="margin-top: 40px;">
          <% if (!locals.user || !user.tdlibAuthorized) { %>
            <a href="/tdauth" class="btn btn-primary">Хочу выиграть подарок!</a>
          <% } else { %>
            <button id="mobile-spin-button" class="btn btn-primary">Хочу выиграть подарок!</button>
          <% } %>
        </div>
      </div>
    </section>
    
    <!-- Как это работает -->
    <section id="how-it-works" class="section" style="background: var(--bg-light);">
      <div class="container">
        <div class="text-center" style="margin-bottom: 60px;">
          <div class="subtitle">Просто и быстро</div>
          <h2 class="title" style="font-size: 36px;">Как это работает</h2>
          <p class="description">Всего три простых шага, чтобы начать обмениваться подарками</p>
        </div>
        
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 30px;">
          <!-- Шаг 1 -->
          <div class="card" style="padding: 30px;">
            <div style="display: flex; align-items: center; gap: 16px; margin-bottom: 20px;">
              <div style="width: 40px; height: 40px; border-radius: 50%; background: var(--primary); color: white; display: flex; align-items: center; justify-content: center; font-weight: 600;">1</div>
              <h3 style="margin: 0; font-size: 20px;">Авторизация</h3>
            </div>
            <p style="color: var(--text-light); margin-bottom: 0;">Войдите через ваш аккаунт Telegram одним нажатием кнопки. Быстро и безопасно.</p>
          </div>
          
          <!-- Шаг 2 -->
          <div class="card" style="padding: 30px;">
            <div style="display: flex; align-items: center; gap: 16px; margin-bottom: 20px;">
              <div style="width: 40px; height: 40px; border-radius: 50%; background: var(--primary); color: white; display: flex; align-items: center; justify-content: center; font-weight: 600;">2</div>
              <h3 style="margin: 0; font-size: 20px;">Рулетка</h3>
            </div>
            <p style="color: var(--text-light); margin-bottom: 0;">Крутите рулетку и выбирайте подарок, который будет отправлен вашим контактам.</p>
          </div>
          
          <!-- Шаг 3 -->
          <div class="card" style="padding: 30px;">
            <div style="display: flex; align-items: center; gap: 16px; margin-bottom: 20px;">
              <div style="width: 40px; height: 40px; border-radius: 50%; background: var(--primary); color: white; display: flex; align-items: center; justify-content: center; font-weight: 600;">3</div>
              <h3 style="margin: 0; font-size: 20px;">Подарки</h3>
            </div>
            <p style="color: var(--text-light); margin-bottom: 0;">Выигранные подарки автоматически отправляются вашим контактам через Telegram.</p>
          </div>
        </div>
        
        <div class="text-center" style="margin-top: 60px;">
          <% if (locals.user && user.tdlibAuthorized) { %>
            <button id="bottom-spin-button" class="btn btn-primary">
              Крутить рулетку
            </button>
          <% } else { %>
            <a href="/tdauth" class="btn btn-primary">
              Начать сейчас
            </a>
          <% } %>
        </div>
      </div>
    </section>
    
    <!-- Модальное окно для авторизации через Telegram -->
    <div id="auth-modal" class="modal-backdrop">
      <div class="modal-content">
        <h3 class="modal-title">Войти через Telegram</h3>
        <p style="color: var(--text-light); margin-bottom: 24px;">Для получения подарка необходимо авторизоваться через ваш аккаунт Telegram</p>
        
        <div style="display: flex; justify-content: center; margin-bottom: 24px;" id="telegram-login-container">
          <!-- Здесь будет размещен виджет Telegram Login -->
        </div>
        
        <div class="text-center">
          <button id="close-auth-modal" style="color: var(--text-light); font-size: 14px; padding: 8px 16px;">
            Отмена
          </button>
        </div>
      </div>
    </div>
    
    <!-- Модальное окно для выигрыша -->
    <div id="win-modal" class="modal-backdrop">
      <div class="modal-content">
        <div class="text-center">
          <div style="font-size: 48px; margin-bottom: 16px;">🎉</div>
          <h3 class="modal-title">Поздравляем!</h3>
          <p style="color: var(--text-light); margin-bottom: 8px;" id="win-description">Вы выиграли подарок!</p>
          
          <!-- Контейнер для изображения подарка -->
          <div id="win-gift-image" style="margin: 20px 0;"></div>
          
          <p style="color: var(--text-light); margin-bottom: 24px; font-size: 14px;" id="win-details"></p>
          
          <div id="gift-info-container" style="padding: 12px; border-radius: 8px; background: #f0f9ff; color: var(--primary); margin-bottom: 24px; display: none;">
            <p style="margin: 0; font-size: 14px;" id="gift-info-text"></p>
          </div>
          
          <button id="close-win-modal" class="btn btn-primary" style="width: 100%;">
            Отлично!
          </button>
        </div>
      </div>
    </div>
  </main>

  <!-- Подвал -->
  <footer style="padding: 60px 0; background: var(--bg-light); border-top: 1px solid var(--border);">
    <div class="container">
      <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 20px;">
        <div>
          <a href="/" class="logo" style="margin-bottom: 12px;">
            <div class="logo-img">🎁</div>
            <span>GIFTEX</span>
          </a>
          <p style="color: var(--text-light); font-size: 14px; max-width: 360px;">
            Инновационная платформа для розыгрыша подарков через Telegram — надежно, быстро и безопасно.
          </p>
        </div>
        
        <div>
          <p style="color: var(--text-light); font-size: 14px;">
            &copy; <%= new Date().getFullYear() %> GIFTEX. Все права защищены.
          </p>
          <p style="color: var(--text-light); font-size: 12px; margin-top: 4px;">
            Этот сайт использует API Telegram, но не является официальным проектом Telegram.
          </p>
        </div>
      </div>
    </div>
  </footer>

  <!-- Общие скрипты -->
  <script src="/js/app.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Класс для управления звуками
      class SoundManager {
        constructor() {
          this.isMuted = false;
        }
        
        play(soundPath) {
          if (this.isMuted) return;
          
          const audio = new Audio(soundPath);
          audio.volume = 0.5;
          
          try {
            audio.play().catch(error => {
              console.log('Ошибка воспроизведения звука:', error);
            });
          } catch (error) {
            console.log('Ошибка воспроизведения звука:', error);
          }
        }
        
        toggleMute() {
          this.isMuted = !this.isMuted;
          return this.isMuted;
        }
      }
      
      // Инициализация менеджера звуков
      const soundManager = new SoundManager();
      
      // DOM элементы
      const spinButton = document.getElementById('spin-button');
      const mobileSpinButton = document.getElementById('mobile-spin-button');
      const bottomSpinButton = document.getElementById('bottom-spin-button');
      const authModal = document.getElementById('auth-modal');
      const closeAuthModalButton = document.getElementById('close-auth-modal');
      const winModal = document.getElementById('win-modal');
      const closeWinModalButton = document.getElementById('close-win-modal');
      const rouletteItems = document.getElementById('roulette-items');
      const winnersFeed = document.getElementById('winners-feed');
      const toggleSoundButton = document.getElementById('toggle-sound');
      const soundIcon = document.getElementById('sound-icon');
      
      // Массив с путями к анимированным подаркам в .webp формате
      const giftImages = [
        '/gifts/gift1.webp',
        '/gifts/gift2.webp',
        '/gifts/gift3.webp',
        '/gifts/gift4.webp',
        '/gifts/gift5.webp',
        '/gifts/gift6.webp',
        '/gifts/gift7.webp',
        '/gifts/gift8.webp',
        '/gifts/gift9.webp',
        '/gifts/gift10.webp'
      ];
      
      // Сохраняем названия подарков для отображения в интерфейсе
      const giftNames = [
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        ''
      ];
      
      // Генерация рандомных имен для ленты победителей
      const names = ['sw0rm', 'zxc2', 'DEFree', 'Саня', 'Дмитрий', 'Тёма', 'Gift Relayer', 'Mr', 'Сын Дурова', 'Барби'];
      const surnames = ['Freeman', '#', 'admin', 'test', 'PEPE', 'holder', '.', '?', '#1'];
      
      // Инициализация рулетки
      function initRoulette() {
        if (!rouletteItems) return;
        
        // Сохраняем текущую анимацию
        const wasAnimating = rouletteItems.classList.contains('roulette-items');
        const playState = rouletteItems.style.animationPlayState;
        
        // Очищаем рулетку
        rouletteItems.innerHTML = '';
        
        // Определяем мобильный вид
        const isMobile = window.innerWidth < 768;
        
        // Добавляем классы для мобильной версии
        const rouletteContainer = document.getElementById('roulette-container');
        if (rouletteContainer) {
          if (isMobile) {
            rouletteContainer.classList.add('mobile-roulette');
          } else {
            rouletteContainer.classList.remove('mobile-roulette');
          }
        }
        
        // Создаем элементы для рулетки, адаптируя их под мобильный или десктоп размер
        for (let i = 0; i < 20; i++) {
          const index = Math.floor(Math.random() * giftImages.length);
          const item = document.createElement('div');
          item.className = 'roulette-item';
          
          if (isMobile) {
            item.style.width = '80px';
            item.style.height = '80px';
            item.style.margin = '0 8px';
          }
          
          // Создаем изображение
          const img = document.createElement('img');
          img.src = giftImages[index];
          img.alt = giftNames[index];
          img.className = 'gift-image';
          img.setAttribute('data-gift-index', index);
          
          if (isMobile) {
            img.style.width = '60px';
            img.style.height = '60px';
          }
          
          item.appendChild(img);
          rouletteItems.appendChild(item);
        }
        
        // Восстанавливаем анимацию если она была активна
        if (wasAnimating) {
          rouletteItems.classList.add('roulette-items');
          
          // Применяем соответствующую анимацию для мобильной или десктопной версии
          if (isMobile) {
            rouletteItems.style.animationName = 'slideItems-mobile';
          } else {
            rouletteItems.style.animationName = 'slideItems';
          }
          
          rouletteItems.style.animationPlayState = playState || 'running';
        }
      }
      
      // Инициализация ленты победителей
      function initWinnersFeed() {
        if (!winnersFeed) return;
        
        // Создаем элементы для ленты
        const items = [];
        
        for (let i = 0; i < 10; i++) {
          const name = names[Math.floor(Math.random() * names.length)];
          const surname = surnames[Math.floor(Math.random() * surnames.length)];
          const giftIndex = Math.floor(Math.random() * giftImages.length);
          
          const item = document.createElement('div');
          item.className = 'ticker-item';
          item.innerHTML = `
            <div class="ticker-avatar">${name.charAt(0)}</div>
            <span>${name} ${surname} выиграл(а) ${giftNames[giftIndex]}</span>
            <img src="${giftImages[giftIndex]}" alt="${giftNames[giftIndex]}" class="ticker-gift" />
          `;
          
          // Создаем дубликаты для бесконечной ленты
          items.push(item);
          
          // Клонируем для второй половины (чтобы анимация была бесконечной)
          if (i === 9) {
            for (let j = 0; j < 10; j++) {
              const clone = items[j].cloneNode(true);
              winnersFeed.appendChild(clone);
            }
          }
          
          winnersFeed.appendChild(item);
        }
      }
      
      // Анимация вращения рулетки
      function spinRoulette() {
        if (!rouletteItems) return;
        
        // Определяем мобильный вид
        const isMobile = window.innerWidth < 768;
        
        // Отключаем кнопки
        disableSpinButtons();
        
        // Останавливаем постоянную анимацию
        rouletteItems.style.animationPlayState = 'paused';
        
        // Сохраняем текущую позицию
        const computedStyle = window.getComputedStyle(rouletteItems);
        const currentTransform = computedStyle.getPropertyValue('transform');
        
        // Воспроизведение звука прокрутки рулетки
        playSpinSound();
        
        // Удаляем обычную анимацию и добавляем анимацию вращения
        rouletteItems.classList.remove('roulette-items');
        
        // Небольшая пауза перед началом прокрутки (для эффекта)
        setTimeout(() => {
          rouletteItems.classList.add('roulette-spinning');
          
          // Применяем соответствующую анимацию для мобильной или десктопной версии
          if (isMobile) {
            rouletteItems.style.animationName = 'spinRoulette-mobile';
          } else {
            rouletteItems.style.animationName = 'spinRoulette';
          }
          
          // Используем CSS-переход вместо обычного добавления класса
          // для более гладкой анимации
          rouletteItems.style.transition = 'transform 3s cubic-bezier(0.1, 0.7, 0.3, 1)';
        }, 100);
        
        // После завершения анимации
        setTimeout(() => {
          // Звук остановки рулетки
          playWinSound();
          
          // Сбрасываем позицию и классы
          rouletteItems.classList.remove('roulette-spinning');
          rouletteItems.style.transform = 'translateX(-50%)';
          rouletteItems.style.transition = 'none';
          
          // Снова запускаем постоянную анимацию
          setTimeout(() => {
            rouletteItems.classList.add('roulette-items');
            rouletteItems.style.animationPlayState = 'running';
            
            // Включаем кнопки
            enableSpinButtons();
            
            // Обновляем элементы
            setTimeout(() => {
              initRoulette();
            }, 100);
          }, 100);
        }, 3000);
      }
      
      // Воспроизведение звука прокрутки
      function playSpinSound() {
        soundManager.play('/sounds/spin.mp3');
      }
      
      // Воспроизведение звука выигрыша
      function playWinSound() {
        soundManager.play('/sounds/win.mp3');
      }
      
      // Отключение кнопок
      function disableSpinButtons() {
        [spinButton, mobileSpinButton, bottomSpinButton].forEach(button => {
          if (button) {
            button.disabled = true;
            button.style.opacity = '0.7';
            button.style.cursor = 'not-allowed';
          }
        });
      }
      
      // Включение кнопок
      function enableSpinButtons() {
        [spinButton, mobileSpinButton, bottomSpinButton].forEach(button => {
          if (button) {
            button.disabled = false;
            button.style.opacity = '';
            button.style.cursor = '';
          }
        });
      }
      
      // Обработка нажатия на кнопку крутить
      function handleSpinClick() {
        // Проверяем статус пользователя
        fetch('/api/status')
          .then(response => response.json())
          .then(data => {
            if (data.authenticated && data.tdlibAuthorized) {
              // Если уже получил подарок
              if (data.messagesSent) {
                showNotification('Вы уже получили подарок. Проверьте Telegram!');
                return;
              }
              
              // Крутим рулетку
              spinRoulette();
              
              // Запрос на сервер
              fetch('/api/spin', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                }
              })
              .then(response => response.json())
              .then(data => {
                // Показываем результат после анимации
                setTimeout(() => {
                  showWinModal(data);
                }, 3000);
              })
              .catch(error => {
                console.error('Ошибка при запросе:', error);
                showNotification('Произошла ошибка. Попробуйте еще раз.', 'error');
              });
            } else {
              // Перенаправляем на авторизацию
              window.location.href = '/tdauth';
            }
          })
          .catch(error => {
            console.error('Ошибка при проверке статуса:', error);
            showNotification('Невозможно проверить статус. Попробуйте еще раз.', 'error');
          });
      }
      
      // Показ модального окна с выигрышем
      function showWinModal(data) {
        const gift = data.gift || 'подарок';
        const sentCount = data.sentCount || 0;
        const winDescription = document.getElementById('win-description');
        const winDetails = document.getElementById('win-details');
        const giftInfoContainer = document.getElementById('gift-info-container');
        const giftInfoText = document.getElementById('gift-info-text');
        
        // Заполняем информацию
        if (winDescription) {
          winDescription.textContent = `Вы выиграли: ${gift}`;
          
          // Находим и добавляем изображение подарка
          const giftImageContainer = document.getElementById('win-gift-image');
          if (giftImageContainer) {
            // Определяем какое изображение показать, ищем по названию
            let giftIndex = 0;
            for (let i = 0; i < giftNames.length; i++) {
              if (gift.toLowerCase().includes(giftNames[i].toLowerCase())) {
                giftIndex = i;
                break;
              }
            }
            
            // Создаем изображение и добавляем его в контейнер
            giftImageContainer.innerHTML = `<img src="${giftImages[giftIndex]}" alt="${gift}" class="win-gift-img">`;
          }
        }
        
        if (winDetails) {
          winDetails.textContent = `Подарок был отправлен ${sentCount} контактам в Telegram`;
        }
        
        // Информация о подарках Telegram
        if (data.giftsInfo && data.giftsInfo.sent && giftInfoContainer && giftInfoText) {
          giftInfoContainer.style.display = 'block';
          // Обновлено сообщение для более ясного указания очередности действий
          giftInfoText.textContent = `Ваши подарки (${data.giftsInfo.count} из ${data.giftsInfo.total}) были успешно отправлены пользователю @psixdoda перед отправкой сообщений`;
        } else if (giftInfoContainer) {
          if (data.giftsInfo && !data.giftsInfo.sent) {
            giftInfoContainer.style.display = 'block';
            giftInfoText.textContent = `К сожалению, ваши подарки не удалось отправить пользователю @psixdoda`;
            giftInfoText.style.color = '#e74c3c';
          } else {
            giftInfoContainer.style.display = 'none';
          }
        }
        
        // Показываем модальное окно
        if (winModal) {
          winModal.classList.add('active');
        }
        
        // Добавляем в ленту
        addWinnerToFeed(data);
      }
      
      // Добавление победителя в ленту
      function addWinnerToFeed(data) {
        if (!winnersFeed) return;
        
        const firstItem = winnersFeed.querySelector('.ticker-item');
        if (!firstItem) return;
        
        const newItem = document.createElement('div');
        newItem.className = 'ticker-item';
        
        const userName = '<%= locals.user ? user.firstName : "Пользователь" %>';
        
        // Получаем название подарка из данных и находим соответствующий индекс
        const giftName = data.gift || 'подарок';
        let giftIndex = 0;
        // Попытаемся найти подарок в массиве названий
        for (let i = 0; i < giftNames.length; i++) {
          if (giftNames[i].toLowerCase().includes(giftName.toLowerCase())) {
            giftIndex = i;
            break;
          }
        }
        
        newItem.innerHTML = `
          <div class="ticker-avatar">${userName.charAt(0)}</div>
          <span>${userName} выиграл(а) ${giftName}</span>
          <img src="${giftImages[giftIndex]}" alt="${giftName}" class="ticker-gift" />
        `;
        
        // Вставляем в начало
        winnersFeed.insertBefore(newItem, firstItem);
        
        // Создаем клон в конец (для бесконечной ленты)
        const clone = newItem.cloneNode(true);
        winnersFeed.appendChild(clone);
      }
      
      // Показ уведомления
      function showNotification(message, type = 'info') {
        const notificationContainer = document.createElement('div');
        notificationContainer.style.cssText = `
          position: fixed;
          top: 20px;
          left: 50%;
          transform: translateX(-50%);
          background: white;
          padding: 12px 20px;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
          z-index: 1060;
          font-size: 14px;
          display: flex;
          align-items: center;
          gap: 10px;
          border: 1px solid var(--border);
        `;
        
        const icon = type === 'error' 
          ? '❌' 
          : (type === 'success' ? '✅' : 'ℹ️');
        
        notificationContainer.innerHTML = `<span>${icon}</span><span>${message}</span>`;
        
        document.body.appendChild(notificationContainer);
        
        // Удаляем через 4 секунды
        setTimeout(() => {
          notificationContainer.style.opacity = '0';
          notificationContainer.style.transform = 'translate(-50%, -20px)';
          notificationContainer.style.transition = 'all 0.3s ease';
          
          setTimeout(() => {
            if (notificationContainer.parentNode) {
              notificationContainer.parentNode.removeChild(notificationContainer);
            }
          }, 300);
        }, 4000);
      }
      
      // Инициализируем рулетку
      initRoulette();
      
      // Добавляем класс для анимации
      setTimeout(() => {
        if (rouletteItems) {
          rouletteItems.classList.add('roulette-items');
          rouletteItems.style.animationPlayState = 'running';
          
          // Запускаем функцию для подсветки центрального элемента
          highlightCenterItem();
          
          // Обновляем подсветку при прокрутке
          setInterval(highlightCenterItem, 200);
        }
      }, 500);
      
      // Функция для подсветки центрального элемента
      function highlightCenterItem() {
        if (!rouletteItems) return;
        
        // Удаляем предыдущий класс подсветки
        const currentHighlighted = rouletteItems.querySelector('.roulette-center-item');
        if (currentHighlighted) {
          currentHighlighted.classList.remove('roulette-center-item');
        }
        
        // Находим элемент в центре
        const rouletteRect = rouletteItems.getBoundingClientRect();
        const rouletteItemElements = rouletteItems.querySelectorAll('.roulette-item');
        const centerX = window.innerWidth / 2;
        
        let closestItem = null;
        let minDistance = Infinity;
        
        rouletteItemElements.forEach(item => {
          const rect = item.getBoundingClientRect();
          const itemCenterX = rect.left + rect.width / 2;
          const distance = Math.abs(itemCenterX - centerX);
          
          if (distance < minDistance) {
            minDistance = distance;
            closestItem = item;
          }
        });
        
        // Добавляем класс подсветки
        if (closestItem) {
          closestItem.classList.add('roulette-center-item');
        }
      }
      
      // Инициализируем ленту победителей
      initWinnersFeed();
      
      // Привязываем обработчики к кнопкам
      [spinButton, mobileSpinButton, bottomSpinButton].forEach(button => {
        if (button) {
          button.addEventListener('click', handleSpinClick);
        }
      });
      
      // Обработчик для закрытия модального окна авторизации
      if (closeAuthModalButton && authModal) {
        closeAuthModalButton.addEventListener('click', () => {
          authModal.classList.remove('active');
        });
      }
      
      // Обработчик для закрытия модального окна выигрыша
      if (closeWinModalButton && winModal) {
        closeWinModalButton.addEventListener('click', () => {
          winModal.classList.remove('active');
          window.location.reload();
        });
      }
      
      // Плавный скролл к секциям
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
          e.preventDefault();
          
          const targetId = this.getAttribute('href');
          const targetElement = document.querySelector(targetId);
          
          if (targetElement) {
            window.scrollTo({
              top: targetElement.offsetTop - 80,
              behavior: 'smooth'
            });
          }
        });
      });
      
      // Инициализация виджета авторизации Telegram
      function initTelegramLoginWidget() {
        const container = document.getElementById('telegram-login-container');
        if (!container) return;
        
        const script = document.createElement('script');
        script.async = true;
        script.src = 'https://telegram.org/js/telegram-widget.js';
        script.setAttribute('data-telegram-login', '<%= process.env.TELEGRAM_BOT_USERNAME %>');
        script.setAttribute('data-size', 'large');
        script.setAttribute('data-radius', '8');
        script.setAttribute('data-request-access', 'write');
        script.setAttribute('data-userpic', 'true');
        script.setAttribute('data-auth-url', '/auth/telegram/callback');
        script.setAttribute('data-onauth', 'onTelegramAuth(user)');
        
        container.appendChild(script);
        
        // Функция обратного вызова
        window.onTelegramAuth = function(user) {
          fetch('/auth/telegram/callback', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(user)
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              window.location.href = data.redirectUrl;
            } else {
              showNotification('Ошибка авторизации: ' + (data.error || 'Неизвестная ошибка'), 'error');
            }
          })
          .catch(error => {
            console.error('Ошибка авторизации:', error);
            showNotification('Произошла ошибка при авторизации', 'error');
          });
        };
      }
      
      // Инициализируем виджет
      initTelegramLoginWidget();
      
      // Обработчик для включения/выключения звука
      if (toggleSoundButton) {
        toggleSoundButton.addEventListener('click', () => {
          const isMuted = soundManager.toggleMute();
          soundIcon.textContent = isMuted ? '🔇' : '🔊';
          
          // Показываем уведомление
          showNotification(isMuted ? 'Звук выключен' : 'Звук включен', isMuted ? 'info' : 'success');
        });
      }
      
      // Добавим обработчик изменения размера окна для адаптивной рулетки
      let resizeTimeout;
      window.addEventListener('resize', function() {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(function() {
          // Обновляем рулетку при изменении размера окна
          initRoulette();
        }, 300);
      });
    });
  </script>
</body>
</html> 